names(d)[names(d)=="Prior.signs.of.possible.mental.illness"]<-PriorMI
names(d)[names(d)=="Prior.signs.of.possible.mental.illness"]<-"PriorMI"
d$Type<-as.factor(d$Type)
source('D:/Coursera/Data_Products/shootings.R')
d$PriorMI<-tolower(trimws(d$PriorMI))
unique(d)
unique(d$PriorMI)
d$PriorMI<-gsub("unclear", "unknown", x=d$PriorMI)
unique(d$PriorMI)
str(d$PriorMI)
class(d$PriorMI)
source('D:/Coursera/Data_Products/shootings.R')
plot(d$Fatalities~d$PriorMI, col=d$venue)
plot(d$Fatalities,d$PriorMI, col=d$venue)
plot(d$PriorMI)
plot(d$Fatalities)
plot(d$Fatalities~d$PriorMI)
class(d$PriorMI)
d$PriorMI<-as.factor(d$PriorMI)
plot(d$Fatalities,d$PriorMI, col=d$venue)
plot(d$Fatalities~d$PriorMI, col=d$venue)
d<-write.csv(d, file = "d.csv")
d<-read.csv("d.csv")
m<-leaflet(data = d) %>%
# addTiles()%>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng=-90, lat=40, zoom=4)%>%
addCircleMarkers(lng=d$longitude, lat=d$latitude, radius=d$Total.victims,color = ~pal2(Type), stroke = .5, fillColor = ~pal(Weapons.obtained.legally), popup=paste(d$Summary,  paste("Total: ", d$Total.victims), paste("Killed: ", d$Fatalities), sep="<br/>"))
pal<-colorFactor(c("red", "yellow", "green"), d$Weapons.obtained.legally)
pal2<-colorFactor(c("blue", "black"), d$Type)
m<-leaflet(data = d) %>%
# addTiles()%>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng=-90, lat=40, zoom=4)%>%
addCircleMarkers(lng=d$longitude, lat=d$latitude, radius=d$Total.victims,color = ~pal2(Type), stroke = .5, fillColor = ~pal(Weapons.obtained.legally), popup=paste(d$Summary,  paste("Total: ", d$Total.victims), paste("Killed: ", d$Fatalities), sep="<br/>"))
print(m)
source('D:/Coursera/Data_Products/shootings.R')
m<-leaflet(data = d) %>%
# addTiles()%>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng=-90, lat=40, zoom=4)%>%
addCircleMarkers(lng=d$longitude, lat=d$latitude, radius=d$Total.victims,color = ~pal2(Type), stroke = .5, fillColor = ~pal(Weapons.obtained.legally), popup=paste(d$Summary,  paste("Total Harmed: ", d$Total.victims), paste("Killed: ", d$Fatalities), sep="<br/>"))
print(m)
m<-leaflet(data = d) %>%
# addTiles()%>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng=-90, lat=40, zoom=4)%>%
addCircleMarkers(lng=d$longitude, lat=d$latitude, radius=d$Total.victims,color = ~pal2(Type), stroke = .5, fillColor = ~pal(Weapons.obtained.legally), popup=paste(d$Summary,  paste("Total Harmed: ", d$Total.victims), paste("Killed: ", d$Fatalities),paste("Total Harmed: ", d$Total.victims), paste("Injured: ", d$Injured), sep="<br/>"))
print(m)
m<-leaflet(data = d) %>%
# addTiles()%>%
addProviderTiles("CartoDB.Positron")%>%
setView(lng=-90, lat=40, zoom=4)%>%
addCircleMarkers(lng=d$longitude, lat=d$latitude, radius=d$Total.victims,color = ~pal2(Type), stroke = .5, fillColor = ~pal(Weapons.obtained.legally), popup=paste(d$Summary,  paste("Total Harmed: ", d$Total.victims), paste("Killed: ", d$Fatalities), paste("Injured: ", d$Injured), sep="<br/>"))
print(m)
plot(d$Fatalities~d$PriorMI, col=d$venue)
d<-d[!is.na(d$latitude),]
d<-d[!is.na(d$longitude),]
d<-write.csv(d, file = "d.csv")
d<-read.csv("d.csv")
# map('state')
# points(symbols(x=d$longitude, y=d$latitude, circles=sqrt(d$Total.victims/pi), inches=1/10, ann=F, bg="steelblue2", fg=NULL))
source('D:/Coursera/Data_Products/shootings.R')
shiny::runApp('shootingsUS')
server <- function(input, output, session) {
library(shiny)
library(leaflet)
library(RColorBrewer)
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Magnitudes", min(quakes$mag), max(quakes$mag),
value = range(quakes$mag), step = 0.1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
quakes[quakes$mag >= input$range[1] & quakes$mag <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, quakes$mag)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^mag/10, weight = 1, color = "#777777",
fillColor = ~pal(mag), fillOpacity = 0.7, popup = ~paste(mag)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = quakes)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag
)
}
})
}
pal = pal, values = ~mag, labels=""
debugSource('D:/Coursera/Data_Products/earthquake/earthquake.R')
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
?quakes
d<-read.csv("../d.csv")
d <- read.csv("D:/Coursera/Data_Products/d.csv")
View(d)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(RColorBrewer)
d<-read.csv("d.csv")
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Harmed", min(d$Total.victims), max(d$Total.victims),
value = range(d$Total.victims), step = 1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
checkboxInput("legend", "Show legend", TRUE)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
d[d$Total.victims >= input$range[1] & d$Total.victims <= input$range[2],]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, d$Total.victims)
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(quakes) %>% addTiles() %>%
fitBounds(~min(long), ~min(lat), ~max(long), ~max(lat))
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircles(radius = ~10^Total.victims/10, weight = 1, color = "#777777",
fillColor = ~pal(Total.victims), fillOpacity = 0.7, popup = ~paste(Total.victims)
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = d)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = ~mag, labels=""
)
}
})
}
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
d<-read.csv("d.csv")
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
min(d$longitude)
min(d$latitude)
max(d$longitude)
max(d$latitude)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
library(shiny)
library(leaflet)
library(RColorBrewer)
d<-read.csv("d.csv")
vars<-c("Summary", "latitude", "longitude")
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
#                       sliderInput("range", "Harmed", min(d$Total.victims), max(d$Total.victims),
#                                   value = range(d$Total.victims), step = 1
#                       ),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
selectInput(inputId = "harm", label = "Type of Harm",choices =
c("Total.victims", "Fatalities", "Injured")
),
checkboxInput("legend", "Show legend", TRUE)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
# d[d$Total.victims >= input$range[1] & d$Total.victims <= input$range[2], input$harm]
d[, c(input$harm, vars)]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, d[, input$harm])
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(d) %>% addTiles() %>%
fitBounds(-157.8473, 21.32551, -71.07283, 48.05082)
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircleMarkers(radius = d[, input$harm]/2, weight = 1, color = "#777777",  fillColor = pal(d[, input$harm]), fillOpacity = 0.7, popup = ~d$Summary
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = d)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = d[, input$harm], labels=""
)
}
})
}
shinyApp(ui, server)
source('D:/Coursera/Data_Products/earthquake/earthquake.R')
shinyApp(ui, server)
d$Date<-ts(d$Date)
plot(d$Total.victims~d$Date)
str(d)
d$Date
as.Date(d$Date)
plot(d$Total.victims~d$Date)
axis(1, d$Date)
source('D:/Coursera/Data_Products/shootings.R')
plot(d$Total.victims~d$Date)
d$Date
str(d$Date)
sort(d$Date)
format(d$Date, "%Y")
?format
as.Date(d$Date, "%y")
as.Date(d$Date, "%Y-%m-%d)
as.Date(d$Date, "%Y-%m-%d")
plot(d$Total.victims~d$Date)
axis.Date(1,d$Date,format = "%y")
c<-as.Date(d$Date)
strptime(d$Date, "%Y-%m-%d")
c<-strptime(d$Date, "%Y-%m-%d")
format(c,"%Y")
format(axis.Date(1,d$Date),"Y)"
plot(d$Total.victims~d$Date)
format(axis.Date(1,d$Date),"%Y")
plot(d$Total.victims~d$Date)
axis.Date(1,c)
c<-format(d$Date, "%y")
c<-strptime(d$Date, "%Y-%m-%d")
c<-format(c, "%y")
plot(d$Total.victims~d$Date)
axis.Date(1,c)
axis(1,c)
c
c<-strptime(d$Date, "%Y-%m-%d")
c<-format(c, "%Y")
plot(d$Total.victims~c)
d<-read.csv(URL, stringsAsFactors = FALSE)
d$Date<-as.Date(d$Date, "%m/%d/%Y")
d$Weapons.obtained.legally<-trimws(d$Weapons.obtained.legally)
d$venue<-trimws(d$Venue)
d$venue[1]<-"Other"
d$venue<-as.factor(d$venue)
d$Weapons.obtained.legally[3]<-"Yes"
d$Weapons.obtained.legally<-as.factor(d$Weapons.obtained.legally)
d$Prior.signs.of.possible.mental.illness<-as.factor(d$Prior.signs.of.possible.mental.illness)
names(d)[names(d)=="Prior.signs.of.possible.mental.illness"]<-"PriorMI"
d$PriorMI<-tolower(trimws(d$PriorMI))
d$PriorMI<-gsub("unclear", "unknown", x=d$PriorMI)
d$PriorMI<-as.factor(d$PriorMI)
d$Type<-as.factor(d$Type)
d$Date<-as.Date(d$Date)
d$Date<-strptime(d$Date, "%Y-%m-%d")
plot(d$Fatalities~d$PriorMI, col=d$venue)
d<-d[!is.na(d$latitude),]
d<-d[!is.na(d$longitude),]
d<-write.csv(d, file = "d.csv")
d<-read.csv("d.csv")
source('D:/Coursera/Data_Products/shootings.R')
plot(d$Total.victims~d$Year)
source('D:/Coursera/Data_Products/shootings.R')
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
library(shiny)
library(leaflet)
library(RColorBrewer)
d<-read.csv("d.csv")
vars<-c("Summary", "latitude", "longitude", "Year")
ui <- bootstrapPage(
tags$style(type = "text/css", "html, body {width:100%;height:100%}"),
leafletOutput("map", width = "100%", height = "100%"),
absolutePanel(top = 10, right = 10,
sliderInput("range", "Year", min(d$Year), max(d$Year),
value = range(d$Year), step = 1
),
selectInput("colors", "Color Scheme",
rownames(subset(brewer.pal.info, category %in% c("seq", "div")))
),
selectInput(inputId = "harm", label = "Type of Harm",choices =
c("Total.victims", "Fatalities", "Injured")
),
checkboxInput("legend", "Show legend", TRUE)
)
server <- function(input, output, session) {
# Reactive expression for the data subsetted to what the user selected
filteredData <- reactive({
d[d$Year >= input$range[1] & d$Year <= input$range[2], input$harm]
d[, c(input$harm, vars)]
})
# This reactive expression represents the palette function,
# which changes as the user makes selections in UI.
colorpal <- reactive({
colorNumeric(input$colors, d[, input$harm])
})
output$map <- renderLeaflet({
# Use leaflet() here, and only include aspects of the map that
# won't need to change dynamically (at least, not unless the
# entire map is being torn down and recreated).
leaflet(d) %>% addTiles() %>%
fitBounds(-123.02203, 25.79649, -71.07283, 48.05082)
})
# Incremental changes to the map (in this case, replacing the
# circles when a new color is chosen) should be performed in
# an observer. Each independent set of things that can change
# should be managed in its own observer.
observe({
pal <- colorpal()
leafletProxy("map", data = filteredData()) %>%
clearShapes() %>%
addCircleMarkers(radius = d[, input$harm]/2, weight = 1, color = "#777777",  fillColor = pal(d[, input$harm]), fillOpacity = 0.7, popup = ~d$Summary
)
})
# Use a separate observer to recreate the legend as needed.
observe({
proxy <- leafletProxy("map", data = d)
# Remove any existing legend, and only if the legend is
# enabled, create a new one.
proxy %>% clearControls()
if (input$legend) {
pal <- colorpal()
proxy %>% addLegend(position = "bottomright",
pal = pal, values = d[, input$harm], labels=""
)
}
})
}
shinyApp(ui, server)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
plot(d[d$year>2010, "Total.victims"])
d[d$Year>"2010"]
plot(d[d$year>"2010", "Total.victims"])
class(d$Year)
d$Year>2010
d[d$Year>2010]
View(d)
d[d$Year>2010,1:4]
plot(d$Date>2010~d$Total.victims)
plot(d$Total.victims~d$Date>2010)
plot(d$Total.victims~d$Year>2010)
plot(d$Total.victims~d$Year>2005)
subd<-d[d$Year>2010, d$Total.victims]
subd<-d[d$Year>2005, "Total.victims"]
plot(subd)
subd<-d[d$Year>2005, c("Year","Total.victims")]
plot(subd$Total.victims~subd$Year)
subd<-d[d$Year>2005, c("Date","Year","Total.victims")]
plot(subd$Total.victims~subd$Date, x.axis=d$Year)
plot(subd$Total.victims~subd$Date)
plot(subd$Total.victims~subd$Date, x.axis=d$Year)
plot(subd$Total.victims~subd$Date, x.axis=subd$Year)
subd$Year
plot(subd$Total.victims~subd$Date, x.axis=subd$Year)
plot(subd$Total.victims~subd$Date)
axis(1,subd$Year)
min(subd$Date)
min(subd$Year)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
min(d$Year)
max(d$Year)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
min(d$Year)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
input$range[1]
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/shooting/shooting.R')
shinyApp(ui, server)
source('D:/Coursera/Data_Products/shooting/shooting.R')
ui <- bootstrapPage(
shinyApp(ui, server)
source('D:/Coursera/Data_Products/shooting/ui.R')
shiny::runApp('shooting')
install.packages("quantmod")
shiny::runApp('shooting')
?adjust
shiny::runApp('shooting')
